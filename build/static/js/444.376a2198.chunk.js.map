{"version":3,"file":"static/js/444.376a2198.chunk.js","mappings":"4KAYO,MAAMA,GAAmBC,EAAAA,EAAAA,IAC9B,qBACAC,MACEC,EAKCC,KAEG,IADJ,SAAEC,EAAQ,SAAEC,GAAUF,EAEtB,IACE,MACEG,KAAK,SAAEC,GACPL,SAAS,aAAEM,IACTJ,IACJ,GAAa,OAARG,QAAQ,IAARA,IAAAA,EAAUE,MACb,OAAOJ,GACLK,EAAAA,EAAAA,IAAS,6DAMb,IAAe,IAHDF,EAAaG,WAAWC,GAC7BA,EAAYC,OAASX,EAAQW,OAEpB,CAChB,IAAIC,EAAkB,GACjBZ,EAAQa,MAKXD,EAAQZ,EAAQY,MAJhBZ,EAAQY,MAAME,SAASC,GACrBH,EAAMI,KAAKC,OAAOC,KAAKH,GAAMI,oBAK3BC,EAAAA,EAAAA,IAAOC,EAAAA,GAAgB,CAC3BrB,QAAS,CAAEsB,GAAItB,EAAQsB,GAAIX,KAAMX,EAAQW,KAAMC,SAC/CL,MAAOF,EAASE,cAEZJ,GAASoB,EAAAA,EAAAA,MACfpB,GAASK,EAAAA,EAAAA,IAAS,GAADgB,OAAIxB,EAAQW,KAAI,+BACnC,MACER,GAASK,EAAAA,EAAAA,IAAS,GAADgB,OAAIxB,EAAQW,KAAI,sCAErC,CAAE,MAAOc,GACPC,QAAQC,IAAI,CAAEF,OAChB,I,6JC4CJ,QAvFA,SAAwBxB,GAAkD,IAAjD,SAAE2B,GAA4C3B,EACrE,MAAME,GAAW0B,EAAAA,EAAAA,KACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,UAC1CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,SAC/BR,GACCA,EAASS,OAAS,IACV,OAART,QAAQ,IAARA,OAAQ,EAARA,EAAUU,KAAKC,IAEXC,EAAAA,EAAAA,MAAA,OAAmBL,UAAU,eAAcC,SAAA,EACzCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,SAC/BJ,EAASS,SAASC,SAAS,aAKxBV,EAASS,SAASC,SAAS,YAJ7BR,EAAAA,EAAAA,KAACS,EAAAA,IAAM,CACLR,UAAU,OACVS,QAASA,IAAMzC,GAASN,EAAAA,EAAAA,GAAiB0C,OAQ3CL,EAAAA,EAAAA,KAACW,EAAAA,IAAO,CACNV,UAAU,QACVS,QAAS7C,gBACDI,GACJ2C,EAAAA,EAAAA,GAA0B,CAAExB,GAAIiB,EAAKQ,cAEvC5C,GAASK,EAAAA,EAAAA,IAAS,iCAAiC,OAK3D0B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,UACnCF,EAAAA,EAAAA,KAACc,EAAAA,IAAY,CACXJ,QAASA,KACPzC,GAAS8C,EAAAA,EAAAA,IAAaV,IACtBpC,GACEK,EAAAA,EAAAA,IAAS,GAADgB,OACHe,EAAK5B,KAAI,sCAEf,OAIPuB,EAAAA,EAAAA,KAAA,MAAIC,UAAU,qBAAoBC,SAAEG,EAAK5B,QACzCuB,EAAAA,EAAAA,KAAA,OACEgB,IAAKX,EAAKY,MACVC,IAAI,GACJjB,UAAU,qBACVkB,QAAQ,OACRT,QAASA,KACPzC,GAASmD,EAAAA,EAAAA,IAAcC,EAAAA,GAAYC,cACnCrD,GAASsD,EAAAA,EAAAA,SAAkBC,IAC3B5B,EAAS,YAADN,OAAae,EAAKjB,IAAK,KAGnCY,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,SAChCG,EAAK3B,MAAM0B,KACV,CAACvB,EAA4B4C,KAC3B,MAAMzC,EAAOD,OAAOC,KAAKH,GACzB,OACEyB,EAAAA,EAAAA,MAAA,OAAKL,UAAU,0BAAyBC,SAAA,EACtCF,EAAAA,EAAAA,KAAA,OACEgB,IAAKnC,EAAKG,EAAK,IAAIiC,MACnBC,IAAI,eACJjB,UAAU,gCACVkB,QAAQ,UAEVnB,EAAAA,EAAAA,KAAA,MAAIC,UAAU,+BAA8BC,SACzClB,EAAK,OARoCyC,EAUxC,QA/DNpB,EAAKjB,UA0E7B,C,sJC3DA,QA/BA,WACE,MAAMnB,GAAW0B,EAAAA,EAAAA,KAqBjB,OACEK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOC,UACpBI,EAAAA,EAAAA,MAAA,UAAQI,QArBQ7C,UAClB,MAAM6D,EAAW,IAAIC,EAAAA,IAEnBC,MAAM,MAAEvD,EAAK,IAAEwD,UACPC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAcL,GAExC,GAAIrD,EAAO,CACT,MAAM2D,GAAiBC,EAAAA,EAAAA,IAAMC,EAAAA,IAAUC,EAAAA,EAAAA,IAAM,MAAO,KAAMN,IAE1B,WADNO,EAAAA,EAAAA,IAAQJ,IAClBK,KAAKlC,cACbjB,EAAAA,EAAAA,KAAOoD,EAAAA,EAAAA,IAAWC,EAAAA,GAAY,SAAU,CAC5CV,MACAxD,UAGJJ,GAASuE,EAAAA,EAAAA,IAAc,CAAEnE,UAC3B,GAKgC4B,UAAU,YAAWC,SAAA,EACjDF,EAAAA,EAAAA,KAACyC,EAAAA,IAAQ,IAAG,yBAIpB,E,0BChBA,SAAeC,EAAAA,EAAAA,IAdf,WACE,MAAM,SAAEvE,IAAawE,EAAAA,EAAAA,IAAe5E,IAAA,IAAC,IAAEG,GAAKH,EAAA,OAAKG,CAAG,KAC9C,aAAEE,IAAiBuE,EAAAA,EAAAA,IAAeC,IAAA,IAAC,QAAE9E,GAAS8E,EAAA,OAAK9E,CAAO,IAC1DG,GAAW0B,EAAAA,EAAAA,KAIjB,OAHAkD,EAAAA,EAAAA,YAAU,KACR5E,GAASoB,EAAAA,EAAAA,KAAkB,GAC1B,CAAClB,EAAUF,KAEZ+B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,SAClB/B,GAAW6B,EAAAA,EAAAA,KAAC8C,EAAAA,EAAe,CAACpD,SAAUtB,KAAmB4B,EAAAA,EAAAA,KAAC+C,EAAK,KAGtE,G,2DCjBA,MAQA,EARiBC,GAAwB,KAErChD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UACtBF,EAAAA,EAAAA,KAACgD,EAAS,K","sources":["app/reducers/addPokemonToList.ts","components/PokemonCardGrid.tsx","components/Login.tsx","pages/MyList.tsx","sections/Wrapper.tsx"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { addDoc } from \"firebase/firestore\";\nimport { pokemonListRef } from \"../../utils/firebaseConfig\";\nimport { getUserPokemons } from \"./getUserPokemons\";\nimport { setToast } from \"../slices/AppSlice\";\nimport {\n  pokemonStatsType,\n  pokemonTypeInterface,\n  userPokemonsType,\n} from \"../../utils/types\";\nimport { RootState } from \"../store\";\n\nexport const addPokemonToList = createAsyncThunk(\n  \"pokemon/addPkemon\",\n  async (\n    pokemon: {\n      id: number;\n      name: string;\n      types: pokemonTypeInterface[] | string[];\n      stats?: pokemonStatsType[];\n    },\n    { getState, dispatch }\n  ) => {\n    try {\n      const {\n        app: { userInfo },\n        pokemon: { userPokemons },\n      } = getState() as RootState;\n      if (!userInfo?.email) {\n        return dispatch(\n          setToast(\"Please login in order to add pokemon to your collection.\")\n        );\n      }\n      const index = userPokemons.findIndex((userPokemon: userPokemonsType) => {\n        return userPokemon.name === pokemon.name;\n      });\n      if (index === -1) {\n        let types: string[] = [];\n        if (!pokemon.stats) {\n          pokemon.types.forEach((type: any) =>\n            types.push(Object.keys(type).toString())\n          );\n        } else {\n          types = pokemon.types as string[];\n        }\n        await addDoc(pokemonListRef, {\n          pokemon: { id: pokemon.id, name: pokemon.name, types },\n          email: userInfo.email,\n        });\n        await dispatch(getUserPokemons());\n        dispatch(setToast(`${pokemon.name} added to your collection.`));\n      } else {\n        dispatch(setToast(`${pokemon.name} already part of your collection.`));\n      }\n    } catch (err) {\n      console.log({ err });\n    }\n  }\n);\n","import React from \"react\";\nimport { IoGitCompare } from \"react-icons/io5\";\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\nimport { addToCompare, setCurrentPokemon } from \"../app/slices/PokemonSlice\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport { removePokemonFromUserList } from \"../app/reducers/removePokemonFromUserList\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { setPokemonTab, setToast } from \"../app/slices/AppSlice\";\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\nimport { pokemonTabs } from \"../utils/constants\";\nimport { pokemonTypeInterface, userPokemonsType } from \"../utils/types\";\n\n\nfunction PokemonCardGrid({ pokemons }: { pokemons: userPokemonsType[] }) {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  return (\n    <div className=\"pokemon-card-grid-container\">\n      <div className=\"pokemon-card-grid\">\n        {pokemons &&\n          pokemons.length > 0 &&\n          pokemons?.map((data: userPokemonsType) => {\n            return (\n              <div key={data.id} className=\"pokemon-card\">\n                <div className=\"pokemon-card-list\">\n                  {location.pathname.includes(\"/pokemon\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : location.pathname.includes(\"/search\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : (\n                    <FaTrash\n                      className=\"trash\"\n                      onClick={async () => {\n                        await dispatch(\n                          removePokemonFromUserList({ id: data.firebaseId! })\n                        );\n                        dispatch(setToast(\"Pokemon Removed Successfully.\"));\n                      }}\n                    />\n                  )}\n                </div>\n                <div className=\"pokemon-card-compare\">\n                  <IoGitCompare\n                    onClick={() => {\n                      dispatch(addToCompare(data));\n                      dispatch(\n                        setToast(\n                          `${data.name} has been added to compare queue.`\n                        )\n                      );\n                    }}\n                  />\n                </div>\n                <h3 className=\"pokemon-card-title\">{data.name}</h3>\n                <img\n                  src={data.image}\n                  alt=\"\"\n                  className=\"pokemon-card-image\"\n                  loading=\"lazy\"\n                  onClick={() => {\n                    dispatch(setPokemonTab(pokemonTabs.description));\n                    dispatch(setCurrentPokemon(undefined));\n                    navigate(`/pokemon/${data.id}`);\n                  }}\n                />\n                <div className=\"pokemon-card-types\">\n                  {data.types.map(\n                    (type: pokemonTypeInterface, index: number) => {\n                      const keys = Object.keys(type);\n                      return (\n                        <div className=\"pokemon-card-types-type\" key={index}>\n                          <img\n                            src={type[keys[0]].image}\n                            alt=\"pokemon type\"\n                            className=\"pokemon-card-types-type-image\"\n                            loading=\"lazy\"\n                          />\n                          <h6 className=\"pokemon-card-types-type-text\">\n                            {keys[0]}\n                          </h6>\n                        </div>\n                      );\n                    }\n                  )}\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default PokemonCardGrid;\n","import { useAppDispatch } from \"../app/hooks\";\nimport { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { firebaseAuth, firebaseDB, usersRef } from \"../utils/firebaseConfig\";\nimport { FcGoogle } from \"react-icons/fc\";\nimport { addDoc, collection, getDocs, query, where } from \"firebase/firestore\";\nimport { setUserStatus } from \"../app/slices/AppSlice\";\n\n\nfunction Login() {\n  const dispatch = useAppDispatch();\n\n  const handleLogin = async () => {\n    const provider = new GoogleAuthProvider();\n    const {\n      user: { email, uid },\n    } = await signInWithPopup(firebaseAuth, provider);\n\n    if (email) {\n      const firestoreQuery = query(usersRef, where(\"uid\", \"==\", uid));\n      const fetchedUser = await getDocs(firestoreQuery);\n      if (fetchedUser.docs.length === 0) {\n        await addDoc(collection(firebaseDB, \"users\"), {\n          uid,\n          email,\n        });\n      }\n      dispatch(setUserStatus({ email }));\n    }\n  };\n\n  return (\n    <div className=\"login\">\n      <button onClick={handleLogin} className=\"login-btn\">\n        <FcGoogle /> Login with Google\n      </button>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useEffect } from \"react\";\nimport Wrapper from \"../sections/Wrapper\";\nimport Login from \"../components/Login\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport { getUserPokemons } from \"../app/reducers/getUserPokemons\";\nimport PokemonCardGrid from \"../components/PokemonCardGrid\";\n\nfunction MyList() {\n  const { userInfo } = useAppSelector(({ app }) => app);\n  const { userPokemons } = useAppSelector(({ pokemon }) => pokemon);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(getUserPokemons());\n  }, [userInfo, dispatch]);\n  return (\n    <div className=\"list\">\n      {userInfo ? <PokemonCardGrid pokemons={userPokemons} /> : <Login />}\n    </div>\n  );\n}\n\nexport default Wrapper(MyList);\n","import React from \"react\";\n\nconst Wrapper = (Component: React.FC) => () => {\n  return (\n    <div className=\"content\">\n      <Component />\n    </div>\n  );\n};\n\nexport default Wrapper;\n"],"names":["addPokemonToList","createAsyncThunk","async","pokemon","_ref","getState","dispatch","app","userInfo","userPokemons","email","setToast","findIndex","userPokemon","name","types","stats","forEach","type","push","Object","keys","toString","addDoc","pokemonListRef","id","getUserPokemons","concat","err","console","log","pokemons","useAppDispatch","navigate","useNavigate","location","useLocation","_jsx","className","children","length","map","data","_jsxs","pathname","includes","FaPlus","onClick","FaTrash","removePokemonFromUserList","firebaseId","IoGitCompare","addToCompare","src","image","alt","loading","setPokemonTab","pokemonTabs","description","setCurrentPokemon","undefined","index","provider","GoogleAuthProvider","user","uid","signInWithPopup","firebaseAuth","firestoreQuery","query","usersRef","where","getDocs","docs","collection","firebaseDB","setUserStatus","FcGoogle","Wrapper","useAppSelector","_ref2","useEffect","PokemonCardGrid","Login","Component"],"sourceRoot":""}