{"version":3,"file":"static/js/616.ffed651d.chunk.js","mappings":"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","sources":["app/reducers/addPokemonToList.ts","components/PokemonCardGrid.tsx","pages/Pokemon/Evolution.tsx","pages/Pokemon/Locations.tsx","pages/Pokemon/CapableMoves.tsx","components/Info.tsx","components/PokemonContainer.tsx","pages/Pokemon/Description.tsx","pages/Pokemon.tsx","sections/Wrapper.tsx","../node_modules/extract-colors/src/color/Color.ts","../node_modules/extract-colors/src/sort/AverageGroup.ts","../node_modules/extract-colors/src/sort/AverageManager.ts","../node_modules/extract-colors/src/color/FinalColor.ts","../node_modules/extract-colors/src/extract/cleanInputs.ts","../node_modules/extract-colors/src/color/BudGroup.ts","../node_modules/extract-colors/src/color/RootGroup.ts","../node_modules/extract-colors/src/extract/extractor.ts","../node_modules/extract-colors/src/extractColors.ts","../node_modules/extract-colors/src/sort/sortColors.ts","../node_modules/extract-colors/src/extractColors.browser.ts"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { addDoc } from \"firebase/firestore\";\nimport { pokemonListRef } from \"../../utils/firebaseConfig\";\nimport { getUserPokemons } from \"./getUserPokemons\";\nimport { setToast } from \"../slices/AppSlice\";\nimport {\n  pokemonStatsType,\n  pokemonTypeInterface,\n  userPokemonsType,\n} from \"../../utils/types\";\nimport { RootState } from \"../store\";\n\nexport const addPokemonToList = createAsyncThunk(\n  \"pokemon/addPkemon\",\n  async (\n    pokemon: {\n      id: number;\n      name: string;\n      types: pokemonTypeInterface[] | string[];\n      stats?: pokemonStatsType[];\n    },\n    { getState, dispatch }\n  ) => {\n    try {\n      const {\n        app: { userInfo },\n        pokemon: { userPokemons },\n      } = getState() as RootState;\n      if (!userInfo?.email) {\n        return dispatch(\n          setToast(\"Please login in order to add pokemon to your collection.\")\n        );\n      }\n      const index = userPokemons.findIndex((userPokemon: userPokemonsType) => {\n        return userPokemon.name === pokemon.name;\n      });\n      if (index === -1) {\n        let types: string[] = [];\n        if (!pokemon.stats) {\n          pokemon.types.forEach((type: any) =>\n            types.push(Object.keys(type).toString())\n          );\n        } else {\n          types = pokemon.types as string[];\n        }\n        await addDoc(pokemonListRef, {\n          pokemon: { id: pokemon.id, name: pokemon.name, types },\n          email: userInfo.email,\n        });\n        await dispatch(getUserPokemons());\n        dispatch(setToast(`${pokemon.name} added to your collection.`));\n      } else {\n        dispatch(setToast(`${pokemon.name} already part of your collection.`));\n      }\n    } catch (err) {\n      console.log({ err });\n    }\n  }\n);\n","import React from \"react\";\nimport { IoGitCompare } from \"react-icons/io5\";\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\nimport { addToCompare, setCurrentPokemon } from \"../app/slices/PokemonSlice\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport { removePokemonFromUserList } from \"../app/reducers/removePokemonFromUserList\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { setPokemonTab, setToast } from \"../app/slices/AppSlice\";\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\nimport { pokemonTabs } from \"../utils/constants\";\nimport { pokemonTypeInterface, userPokemonsType } from \"../utils/types\";\n\n\nfunction PokemonCardGrid({ pokemons }: { pokemons: userPokemonsType[] }) {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  return (\n    <div className=\"pokemon-card-grid-container\">\n      <div className=\"pokemon-card-grid\">\n        {pokemons &&\n          pokemons.length > 0 &&\n          pokemons?.map((data: userPokemonsType) => {\n            return (\n              <div key={data.id} className=\"pokemon-card\">\n                <div className=\"pokemon-card-list\">\n                  {location.pathname.includes(\"/pokemon\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : location.pathname.includes(\"/search\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : (\n                    <FaTrash\n                      className=\"trash\"\n                      onClick={async () => {\n                        await dispatch(\n                          removePokemonFromUserList({ id: data.firebaseId! })\n                        );\n                        dispatch(setToast(\"Pokemon Removed Successfully.\"));\n                      }}\n                    />\n                  )}\n                </div>\n                <div className=\"pokemon-card-compare\">\n                  <IoGitCompare\n                    onClick={() => {\n                      dispatch(addToCompare(data));\n                      dispatch(\n                        setToast(\n                          `${data.name} has been added to compare queue.`\n                        )\n                      );\n                    }}\n                  />\n                </div>\n                <h3 className=\"pokemon-card-title\">{data.name}</h3>\n                <img\n                  src={data.image}\n                  alt=\"\"\n                  className=\"pokemon-card-image\"\n                  loading=\"lazy\"\n                  onClick={() => {\n                    dispatch(setPokemonTab(pokemonTabs.description));\n                    dispatch(setCurrentPokemon(undefined));\n                    navigate(`/pokemon/${data.id}`);\n                  }}\n                />\n                <div className=\"pokemon-card-types\">\n                  {data.types.map(\n                    (type: pokemonTypeInterface, index: number) => {\n                      const keys = Object.keys(type);\n                      return (\n                        <div className=\"pokemon-card-types-type\" key={index}>\n                          <img\n                            src={type[keys[0]].image}\n                            alt=\"pokemon type\"\n                            className=\"pokemon-card-types-type-image\"\n                            loading=\"lazy\"\n                          />\n                          <h6 className=\"pokemon-card-types-type-text\">\n                            {keys[0]}\n                          </h6>\n                        </div>\n                      );\n                    }\n                  )}\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default PokemonCardGrid;\n","import React, { useEffect, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport PokemonCardGrid from \"../../components/PokemonCardGrid\";\nimport { getPokemonsData } from \"../../app/reducers/getPokemonsData\";\nimport Loader from \"../../components/Loader\";\nimport { genericPokemonType } from \"../../utils/types\";\n\nfunction Evolution() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const dispatch = useAppDispatch();\n  const pokemonData = useAppSelector(({ pokemon }) => pokemon);\n  useEffect(() => {\n    const fetchData = async () => {\n      const pokemons: genericPokemonType[] =\n        pokemonData.currentPokemon!.evolution.map(\n          ({ pokemon }: { pokemon: genericPokemonType }) => pokemon\n        );\n      await dispatch(getPokemonsData(pokemons));\n      setIsLoaded(true);\n    };\n    fetchData();\n  }, [dispatch, pokemonData.currentPokemon]);\n\n  return (\n    <div className=\"page\">\n      {isLoaded ? (\n        <PokemonCardGrid pokemons={pokemonData.randomPokemons!} />\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n}\n\nexport default Evolution;\n","import React from \"react\";\nimport { useAppSelector } from \"../../app/hooks\";\n\nfunction Locations() {\n  const pokemonData = useAppSelector(\n    ({ pokemon: { currentPokemon } }) => currentPokemon\n  );\n  return (\n    <div className=\"pokemon-locations\">\n      <ul className=\"pokemon-locations-list\">\n        {pokemonData?.encounters.map((encounter: string) => (\n          <li key={encounter} className=\"pokemon-location\">\n            {encounter}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Locations;\n","import React from \"react\";\nimport { useAppSelector } from \"../../app/hooks\";\n\nfunction CapableMoves() {\n  const pokemonData = useAppSelector(\n    ({ pokemon: { currentPokemon } }) => currentPokemon\n  );\n  return (\n    <div className=\"page capable-moves\">\n      <h1 className=\"capable-moves-title\">Abilities</h1>\n      <ul className=\"capable-moves-list ability\">\n        {pokemonData?.pokemonAbilities.abilities.map((ability: string) => (\n          <li className=\"move\" key={ability}>\n            {ability}\n          </li>\n        ))}\n      </ul>\n      <h1 className=\"capable-moves-title\">Moves</h1>\n      <ul className=\"capable-moves-list\">\n        {pokemonData?.pokemonAbilities.moves.map((ability: string) => (\n          <li className=\"move\" key={ability}>\n            {ability}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default CapableMoves;\n","import React, { useEffect } from \"react\";\nimport { pokemonTypes } from \"../utils\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\nimport { setPokemonTab } from \"../app/slices/AppSlice\";\nimport { pokemonTabs } from \"../utils/constants\";\nimport { currentPokemonType, pokemonStatsType } from \"../utils/types\";\n\nfunction Info({\n  data,\n}: {\n  data: currentPokemonType | undefined;\n}) {\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    const progressBars = document.querySelectorAll(\"progress\");\n    progressBars.forEach((progressBar) => {\n      progressBar.style.width = \"10rem\";\n    });\n  }, []);\n  const createStatsArray = (types: string[], statType: string) => {\n    const statsSet = new Set();\n    types.forEach((type: string) => {\n      // @ts-ignore\n      pokemonTypes[type][statType].forEach((stat: string) => {\n        if (!statsSet.has(stat)) {\n          statsSet.add(stat[0].toUpperCase() + stat.slice(1));\n        }\n      });\n    });\n    return Array.from(statsSet);\n  };\n  return (\n    <>\n      <div className=\"details\">\n        <h1 className=\"name\">{data?.name}</h1>\n        <h3>Type: {data?.types.join(\" - \")}</h3>\n        <h3>Evolution: {data?.evolutionLevel}</h3>\n        <button onClick={() => dispatch(setPokemonTab(pokemonTabs.evolution))}>\n          See next evolution\n        </button>\n      </div>\n      <div className=\"stats\">\n        <ul>\n          {data?.stats.map((stat: pokemonStatsType) => {\n            return (\n              <li key={stat.name}>\n                {stat.name}: {stat.value}\n                <progress max={100} value={stat.value} />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <div className=\"battle-stats\">\n        {\n          <ul>\n            <li>\n              <span>Strengths:</span>\n              <span>\n                {createStatsArray(\n                  data?.types as unknown as string[],\n                  \"strength\"\n                ).join(\", \")}\n              </span>\n            </li>\n            <li>\n              <span>Weakness:</span>\n              <span>\n                {createStatsArray(\n                  data?.types as unknown as string[],\n                  \"weakness\"\n                ).join(\", \")}\n              </span>\n            </li>\n            <li>\n              <span>Resistant:</span>\n              <span>\n                {createStatsArray(\n                  data?.types as unknown as string[],\n                  \"resistance\"\n                ).join(\", \")}\n              </span>\n            </li>\n            <li>\n              <span>Vulnerable:</span>\n              <span>\n                {createStatsArray(\n                  data?.types as unknown as string[],\n                  \"vulnerable\"\n                ).join(\", \")}\n              </span>\n            </li>\n          </ul>\n        }\n        <button\n          onClick={() => dispatch(addPokemonToList(data!))}\n          className=\"add-pokemon\"\n        >\n          Add Pokemon\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default Info;","import React from \"react\";\n\nfunction PokemonContainer({ image }: { image: string }) {\n  return (\n    <>\n      <div className=\"circle-container\">\n        <div className=\"outer-circle\">\n          <div className=\"inner-circle\">\n            <img src={image} alt=\"\" />\n          </div>\n          <div className=\"lines\">\n            <div className=\"line line-1\"></div>\n            <div className=\"line line-2\"></div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default PokemonContainer;\n","import React from \"react\";\nimport Info from \"../../components/Info\";\nimport PokemonContainer from \"../../components/PokemonContainer\";\nimport { useAppSelector } from \"../../app/hooks\";\n\nfunction Description() {\n  const pokemonData = useAppSelector(\n    ({ pokemon: { currentPokemon } }) => currentPokemon\n  );\n  return (\n    <>\n      <Info data={pokemonData} />\n      {pokemonData && <PokemonContainer image={pokemonData.image} />}\n    </>\n  );\n}\n\nexport default Description;\n","// @ts-nocheck\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport Wrapper from \"../sections/Wrapper\";\nimport { useParams } from \"react-router-dom\";\nimport { defaultImages, images } from \"../utils\";\nimport { extractColors } from \"extract-colors\";\nimport axios from \"axios\";\nimport Evolution from \"./Pokemon/Evolution\";\nimport Locations from \"./Pokemon/Locations\";\nimport CapableMoves from \"./Pokemon/CapableMoves\";\nimport Description from \"./Pokemon/Description\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport { setCurrentPokemon } from \"../app/slices/PokemonSlice\";\nimport { setPokemonTab } from \"../app/slices/AppSlice\";\nimport Loader from \"../components/Loader\";\nimport { pokemonRoute, pokemonSpeciesRoute, pokemonTabs } from \"../utils/constants\";\n\n\nfunction Pokemon() {\n  const params = useParams();\n  const dispatch = useAppDispatch();\n  const currentPokemonTab = useAppSelector(\n    ({ app: { currentPokemonTab } }) => currentPokemonTab\n  );\n  const currentPokemon = useAppSelector(\n    ({ pokemon: { currentPokemon } }) => currentPokemon\n  );\n\n  useEffect(() => {\n    dispatch(setPokemonTab(pokemonTabs.description));\n  }, [dispatch]);\n\n  const getRecursiveEvolution = useCallback(\n    (evolutionChain, level, evolutionData) => {\n      if (!evolutionChain.evolves_to.length) {\n        return evolutionData.push({\n          pokemon: {\n            ...evolutionChain.species,\n            url: evolutionChain.species.url.replace(\n              \"pokemon-species\",\n              \"pokemon\"\n            ),\n          },\n          level,\n        });\n      }\n      evolutionData.push({\n        pokemon: {\n          ...evolutionChain.species,\n          url: evolutionChain.species.url.replace(\"pokemon-species\", \"pokemon\"),\n        },\n        level,\n      });\n      return getRecursiveEvolution(\n        evolutionChain.evolves_to[0],\n        level + 1,\n        evolutionData\n      );\n    },\n    []\n  );\n\n  const getEvolutionData = useCallback(\n    (evolutionChain) => {\n      const evolutionData = [];\n      getRecursiveEvolution(evolutionChain, 1, evolutionData);\n      return evolutionData;\n    },\n    [getRecursiveEvolution]\n  );\n\n  const [isDataLoading, setIsDataLoading] = useState(true);\n  const getPokemonInfo = useCallback(\n    async (image) => {\n      const { data } = await axios.get(`${pokemonRoute}/${params.id}`);\n      const { data: dataEncounters } = await axios.get(\n        data.location_area_encounters\n      );\n\n      const {\n        data: {\n          evolution_chain: { url: evolutionURL },\n        },\n      } = await axios.get(`${pokemonSpeciesRoute}/${data.id}`);\n      const { data: evolutionData } = await axios.get(evolutionURL);\n\n      const pokemonAbilities = {\n        abilities: data.abilities.map(({ ability }) => ability.name),\n        moves: data.moves.map(({ move }) => move.name),\n      };\n\n      const encounters = [];\n      const evolution = getEvolutionData(evolutionData.chain);\n      let evolutionLevel;\n      evolutionLevel = evolution.find(\n        ({ pokemon }) => pokemon.name === data.name\n      ).level;\n      dataEncounters.forEach((encounter) => {\n        encounters.push(\n          encounter.location_area.name.toUpperCase().split(\"-\").join(\" \")\n        );\n      });\n      const stats = await data.stats.map(({ stat, base_stat }) => ({\n        name: stat.name,\n        value: base_stat,\n      }));\n      dispatch(\n        setCurrentPokemon({\n          id: data.id,\n          name: data.name,\n          types: data.types.map(({ type: { name } }) => name),\n          image,\n          stats,\n          encounters,\n          evolutionLevel,\n          evolution,\n          pokemonAbilities,\n        })\n      );\n      setIsDataLoading(false);\n    },\n    [params.id, dispatch, getEvolutionData]\n  );\n\n  useEffect(() => {\n    const imageElemet = document.createElement(\"img\");\n    imageElemet.src = images[params.id];\n    const options = {\n      pixels: 10000,\n      distance: 1,\n      splitPower: 10,\n      colorValidator: (red, green, blue, alpha = 255) => alpha > 250,\n      saturationDistance: 0.2,\n      lightnessDistance: 0.2,\n      hueDistance: 0.083333333,\n    };\n    const getColor = async () => {\n      const color = await extractColors(imageElemet.src, options);\n      const root = document.documentElement;\n      root.style.setProperty(\"--accent-color\", color[0].hex.split('\"')[0]);\n    };\n    getColor();\n    let image = images[params.id];\n    if (!image) {\n      image = defaultImages[params.id];\n    }\n\n    getPokemonInfo(image);\n  }, [params.id, getPokemonInfo]);\n\n  return (\n    <>\n      {!isDataLoading && currentPokemon ? (\n        <>\n          {currentPokemonTab === pokemonTabs.description && <Description />}\n          {currentPokemonTab === pokemonTabs.evolution && <Evolution />}\n          {currentPokemonTab === pokemonTabs.locations && <Locations />}\n          {currentPokemonTab === pokemonTabs.moves && <CapableMoves />}\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n}\n\nexport default Wrapper(Pokemon);\n","import React from \"react\";\n\nconst Wrapper = (Component: React.FC) => () => {\n  return (\n    <div className=\"content\">\n      <Component />\n    </div>\n  );\n};\n\nexport default Wrapper;\n","/**\n * Informations like saturation or count of pixels in image.\n * \n * @class\n * @classdesc Calculate some informations and store data about color.\n */\nexport default class Color {\n  \n  _red: number\n  _green: number\n  _blue: number\n  _hex: number\n  _count = 1\n\n  private __saturation = -1\n  private __hue = -1\n  private __lightness = -1\n  private __intensity = -1\n\n  /**\n   * Set red, green and blue colors to create the Color object.\n   */\n  constructor (red: number, green: number, blue: number, hex = red << 16 | green << 8 | blue) {\n\n    this._red = red\n    this._green = green\n    this._blue = blue\n    this._hex = hex\n  }\n\n  /**\n   * Distance between two colors.\n   * - Minimum is 0 (between two same colors)\n   * - Maximum is 1 (for example between black and white)\n   */\n  static distance (colorA: Color, colorB: Color) {\n    return (Math.abs(colorB._red - colorA._red) + Math.abs(colorB._green - colorA._green) + Math.abs(colorB._blue - colorA._blue)) / (3 * 0xFF)\n  }  \n\n  updateHSL () {\n    const red = this._red / 255\n    const green = this._green / 255\n    const blue = this._blue / 255\n\n    const max = Math.max(red, green, blue)\n    const min = Math.min(red, green, blue)\n\n    this.__lightness = (max + min) / 2\n\n    // achromatic\n    if (max === min) {\n      this.__hue = 0\n      this.__saturation = 0\n      this.__intensity = 0\n    } else {\n      const distance = max - min;\n      \n      this.__saturation = this.__lightness > 0.5 ? distance / (2 - max - min) : distance / (max + min)\n      this.__intensity = this.__saturation * ((0.5 - Math.abs(0.5 - this.__lightness)) * 2)\n      switch (max) {\n        case red:\n          this.__hue = ((green - blue) / distance + (green < blue ? 6 : 0)) / 6\n          break;\n        case green:\n          this.__hue = ((blue - red) / distance + 2) / 6\n          break;\n        case blue:\n          this.__hue = ((red - green) / distance + 4) / 6\n          break;\n      }\n    }\n\n  }\n\n  /**\n   * Hue from 0 to 1\n   */\n  get _hue () {\n    if (this.__hue === -1) {\n      this.updateHSL()\n    }\n    return this.__hue\n  }\n\n  /**\n   * Saturation from 0 to 1\n   */\n  get _saturation () {\n    if (this.__saturation === -1) {\n      this.updateHSL()\n    }\n    return this.__saturation\n  }\n\n  /**\n   * Lightness from 0 to 1\n   */\n  get _lightness () {\n    if (this.__lightness === -1) {\n      this.updateHSL()\n    }\n    return this.__lightness\n  }\n  \n  /**\n   * Color intensity from 0 to 1\n   */\n  get _intensity () {\n    if (this.__intensity === -1) {\n      this.updateHSL()\n    }\n    return this.__intensity\n  }\n}\n","import Color from \"../color/Color\";\n\nconst distance = (a: number, b: number) => Math.abs(a - b)\nconst hueDistance = (a: number, b: number) =>\n  Math.min(distance(a, b), distance((a + 0.5) % 1, (b + 0.5) % 1))\n\nexport class AverageGroup {\n  colors: Color[] = []\n  private _average: Color | null = null\n\n  addColor(color: Color) {\n    this.colors.push(color)\n    this._average = null\n  }\n\n  isSamePalette(color: Color, hue: number, saturation: number, lightness: number) {\n    for (let i = 0; i < this.colors.length; i++) {\n      const currentColor = this.colors[i]\n      const isSame = \n        hueDistance(currentColor._hue, color._hue) < hue &&\n        distance(currentColor._saturation, color._saturation) < saturation &&\n        distance(currentColor._lightness, color._lightness) < lightness\n\n      if (!isSame) {\n        return false\n      }\n    }\n    return true\n  }\n\n  get average () {\n    if (!this._average) {\n      const { r, g, b } = this.colors.reduce((total, color) => {\n        total.r += color._red\n        total.g += color._green\n        total.b += color._blue\n        return total\n      }, { r: 0, g: 0, b: 0 })\n\n      const total = this.colors.reduce((_count, color) => _count + color._count, 0)\n      this._average = new Color(\n        Math.round(r / this.colors.length),\n        Math.round(g / this.colors.length),\n        Math.round(b / this.colors.length)\n      )\n      this._average._count = total\n    }\n    return this._average\n  } \n}","import Color from \"../color/Color\";\nimport { AverageGroup } from \"./AverageGroup\";\n\n\nexport class AverageManager {\n\n  _hue:number\n  _saturation:number\n  _lightness:number\n\n  private _groups: AverageGroup[] = []\n\n  constructor (\n    hue: number,\n    saturation: number,\n    lightness: number\n  ) {\n    this._hue = hue\n    this._saturation = saturation\n    this._lightness = lightness\n  }\n\n  addColor(color: Color) {\n    const samePalette = this._groups.find(averageGroup => averageGroup.isSamePalette(color, this._hue, this._saturation, this._lightness))\n    if (samePalette) {\n      samePalette.addColor(color)\n    } else {\n      const averageGroup = new AverageGroup()\n      averageGroup.addColor(color)\n      this._groups.push(averageGroup)\n    }\n  }\n\n  getGroups() {\n    return this._groups.map(averageGroup => averageGroup.average)\n  }\n}","import { FinalColor } from \"../types/Color\";\nimport Color from \"./Color\";\n\nexport const createFinalColor = (color: Color, pixels: number): FinalColor => {\n  return {\n    hex: `#${'0'.repeat(6 - color._hex.toString(16).length)}${color._hex.toString(16)}`,\n    red: color._red,\n    green: color._green,\n    blue: color._blue,\n    area: color._count / pixels,\n    hue: color._hue,\n    saturation: color._saturation,\n    lightness: color._lightness,\n    intensity: color._intensity,\n  }\n}","import { BrowserOptions, NodeOptions } from \"../types/Options\"\n\n/**\n * Default extractor values\n */\nexport const enum EXTRACTOR_DEFAULT {\n  PIXELS = 10000,\n  DISTANCE = 0.12,\n  SPLIT_POWER = 10\n}\n\n/**\n * Default average values\n */\nexport const enum AVERAGE_DEFAULT {\n  HUE = 1/12,\n  SATURATION = 1/5,\n  LIGHTNESS = 1/5,\n}\n\n/**\n * Test if value is an integer.\n */\nconst testUint = <T = number>(label: string, val: T, min = 0, max = Number.MAX_SAFE_INTEGER) => {\n  if (!Number.isInteger(val) || val < min || val > max) {\n    throw new Error(`${label} is invalid (${ val })`)\n  }\n\n  return val\n}\n\n/**\n * Test if value is a number.\n */\nconst testNumber = <T = number>(label: string, val: T, min = 0, max = Number.MAX_VALUE) => {\n  if (Number(val) !== val || val < min || val > max) {\n    throw new Error(`${label} is invalid (${ val })`)\n  }\n\n  return val\n}\n\n/**\n * Test if value is a function.\n */\nconst testFunction = <T = () => void>(label: string, val: T) => {\n  if (!val || {}.toString.call(val) !== '[object Function]') {\n    throw new Error(`${label} is invalid (${ val })`)\n  }\n\n  return val\n}\n\nexport default (options:BrowserOptions | NodeOptions): [\n  number,\n  number,\n  number,\n  (red: number, green: number, blue: number, alpha: number) => boolean,\n  number,\n  number,\n  number,\n  \"\" | \"anonymous\" | \"use-credentials\" | null,\n] => {\n  return [\n    testUint('pixels', options.pixels ?? EXTRACTOR_DEFAULT.PIXELS, 1),\n    testNumber('distance', options.distance ?? EXTRACTOR_DEFAULT.DISTANCE, 0, 1),\n    testUint('splitPower', options.splitPower ?? EXTRACTOR_DEFAULT.SPLIT_POWER, 2, 15),\n    testFunction('colorValidator', options.colorValidator ?? ((_red: number, _green: number, _blue: number, _alpha?: number) => (_alpha ?? 255) > 250)),\n    testNumber('hueDistance', options.hueDistance ?? AVERAGE_DEFAULT.HUE, 0, 1),\n    testNumber('saturationDistance', options.saturationDistance ?? AVERAGE_DEFAULT.LIGHTNESS, 0, 1),\n    testNumber('lightnessDistance', options.lightnessDistance ?? AVERAGE_DEFAULT.SATURATION, 0, 1),\n    (options as BrowserOptions).crossOrigin ?? null\n  ]\n}\n","import Color from './Color'\n\n/**\n * Manage list of colors to optimize and merge neighbors colors.\n *\n * @export\n * @class BudGroup\n */\nexport default class BudGroup {\n\n  _count: number\n  _children: { [key: number]: Color }\n  _maxWeight: number | undefined\n\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor () {\n    this._count = 1\n    this._children = { }\n  }\n\n  /**\n   * Add color to the group.\n   */\n  addColor (_hex: number, _red: number, _green: number, _blue: number) {\n    if (this._children[_hex]) {\n      this._children[_hex]._count++\n    } else {\n      this._children[_hex] = new Color(_red, _green, _blue, _hex)\n    }\n\n    return this._children[_hex]\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   */\n  getList () {\n    return (Object.keys(this._children) as unknown[] as number[])\n      .map((key) => this._children[key])\n  }\n\n  /**\n   * Max color weight between the list colors, depends of his saturation and his _count.\n   */\n   getMaxWeight (_count: number): number {\n    if (this._maxWeight === undefined) {\n      const list = this.getList()\n        .map((child) => child._count / _count)\n\n      list.sort((a, b) => b - a)\n      this._maxWeight = list[0] || 0\n    }\n\n    return this._maxWeight \n  }\n\n  /**\n   * Color with the the max weight between the list colors, depends of his saturation and his _count.\n   */\n  getMaxWeightColor (_count: number) {\n    const list = this.getList()\n    list.sort((a, b) => {\n      return (b._count / _count) - (a._count / _count)\n    })\n\n    return list[0]\n  }\n\n  /**\n   * Max _count of colors for a group of colors.\n   */\n  getMaxCountColor () {\n    const list = this.getList()\n    const biggest = list.reduce((a, b) => a._count >= b._count ? a : b)\n    return biggest\n  }\n}\n","import Color from './Color'\nimport BudGroup from './BudGroup'\n\n/**\n * RootGroup colors with algorithms to optimize and merge neighbors colors.\n * \n * @class\n * @classdesc Manage list of colors or groups.\n */\nexport default class RootGroup {\n  _count: number\n  _children: { [key: number]: RootGroup | BudGroup }\n  _maxWeight: number | undefined\n\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor () {\n    this._count = 1\n    this._children = { }\n  }\n\n  /**\n   * Add a key for a color, this key is a simplification to find neighboring colors.\n   * Neighboring colors has same key.\n   */\n  addRootGroup (key: number) {\n    if (this._children[key]) {\n      this._children[key]._count++\n    } else {\n      this._children[key] = new RootGroup()\n    }\n\n    return this._children[key] as RootGroup\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   */\n  getList () {\n    return (Object.keys(this._children) as unknown[] as number[])\n      .map((key) => this._children[key])\n  }\n\n  /**\n   * Add a key for a color, this key is a simplification to find neighboring colors.\n   * Neighboring colors has same key.\n   */\n   addBudGroup (key: number) {\n    if (this._children[key]) {\n      this._children[key]._count++\n    } else {\n      this._children[key] = new BudGroup()\n    }\n\n    return this._children[key] as BudGroup\n  }\n\n  /**\n   * Max color weight between the list colors, depends of his saturation and his _count.\n   */\n  getMaxWeight (_count: number): number {\n    if (this._maxWeight === undefined) {\n      const list = this.getList()\n        .map((child) => child._count / _count)\n\n      list.sort((a, b) => b - a)\n      this._maxWeight = list[0] || 0\n    }\n\n    return this._maxWeight \n  }\n\n  /**\n   * Color with the the max weight between the list colors, depends of his saturation and his _count.\n   */\n  getMaxWeightColor (_count: number): Color {\n    const list = this.getList()\n    list.sort((a, b) => {\n      return (b._count / _count) - (a._count / _count)\n    })\n\n    return list[0].getMaxWeightColor(_count)\n  }\n\n  /**\n   * Max _count of colors for a group of colors.\n   */\n  getMaxCountColor (): Color {\n    const list = this.getList()\n    const biggest = list.reduce((a, b) => a.getMaxCountColor()._count >= b.getMaxCountColor()._count ? a : b)\n    return biggest.getMaxCountColor()\n  }\n\n  /**\n   * List of colors sorted by importance (neighboring hare calculated by distance and removed).\n   * Importance is calculated with the saturation and _count of neighboring colors.\n   */\n  getColors (_distance: number, _count: number) {\n    const list = this.getList()\n      .map((child) => {\n        const { _count } = child\n        const color = child.getMaxCountColor()\n        color._count = _count\n        return color\n      })\n\n    list.sort((a, b) => (b._count / _count) - (a._count / _count))\n\n    const newList: Color[] = []\n    list.forEach((color) => {\n      const near = newList.find((col) => Color.distance(col, color) < _distance)\n      if (!near) {\n        newList.push(color)\n      } else {\n        near._count += color._count\n      }\n    })\n\n    return newList\n  }\n}\n","import RootGroup from '../color/RootGroup'\n\n/**\n * Run extract process and get list of colors.\n */\nexport default (\n  { data, width, height }: ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number },\n  _pixels: number,\n  _distance: number,\n  _splitPower: number,\n  _colorValidator: (red: number, green: number, blue: number, alpha: number) => boolean\n) => {\n  const rootGroup = new RootGroup()\n  const reducer = (width && height) ? Math.floor(width * height / _pixels) || 1 : 1\n  \n  for (let i = 0; i < data.length; i += 4 * reducer) {\n    const r = data[i] // 0 -> 255\n    const g = data[i + 1]\n    const b = data[i + 2]\n    const a = data[i + 3]\n\n    if (_colorValidator(r, g, b, a)) {\n      const real = r << 16 | g << 8 | b\n      const medium = (r >> 4 & 0xF) << 8 | (g >> 4 & 0xF) << 4 | (b >> 4 & 0xF)\n      const small = Math.round(r * (_splitPower - 1) / 255) * (_splitPower * _splitPower) + Math.round(g * (_splitPower - 1) / 255) * _splitPower + Math.round(b * (_splitPower - 1) / 255)\n\n      const smallGroup = rootGroup.addRootGroup(small)\n      const mediumGroup = smallGroup.addBudGroup(medium)\n      mediumGroup.addColor(real, r, g, b)\n    }\n  }\n  \n  return rootGroup.getColors(_distance, _pixels)\n}\n","import Color from \"./color/Color\"\nimport sortColors from \"./sort/sortColors\"\nimport { createFinalColor } from \"./color/FinalColor\"\nimport { BrowserOptions, NodeOptions } from \"./types/Options\"\nimport cleanInputs from \"./extract/cleanInputs\"\nimport extractor from \"./extract/extractor\"\n\n/**\n * Sort colors and generate standard list of colors.\n */\nexport const sortFinalColors = (_colors: Color[], _pixels: number, _hueDistance: number, _saturationDistance: number, _lightnessDistance: number) => {\n  const list = sortColors(_colors, _pixels, _hueDistance, _saturationDistance, _lightnessDistance)\n  return list.map(color => createFinalColor(color, _pixels))\n}\n\n/**\n * Extract colors from an ImageData object.\n */\nexport const extractColorsFromImageData = (imageData: ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number }, options: NodeOptions | BrowserOptions = {}) => {\n  const [_pixels, _distance, _splitPower, _colorValidator, _hueDistance, _saturationDistance, _lightnessDistance] = cleanInputs(options)\n  const colors = extractor(imageData, _pixels, _distance, _splitPower, _colorValidator)\n  const px = (imageData.width && imageData.height) ? Math.min(imageData.width * imageData.height, _pixels) : _pixels\n  return sortFinalColors(colors, px, _hueDistance, _saturationDistance, _lightnessDistance)\n}\n","import Color from \"../color/Color\";\nimport { AverageManager } from \"./AverageManager\";\n\nexport default (\n  list: Color[],\n  _pixels: number,\n  _hueDistance: number,\n  _saturationDistance: number,\n  _lightnessDistance: number,\n) => {\n  const averageManager = new AverageManager(_hueDistance, _saturationDistance, _lightnessDistance)\n  list.forEach(color => averageManager.addColor(color))\n\n  const sorted = averageManager.getGroups()\n\n  sorted.sort((a, b) => {\n    const bPower = (b._intensity + 0.1) * (0.9 - b._count / _pixels)\n    const aPower = (a._intensity + 0.1) * (0.9 - a._count / _pixels)\n    return bPower - aPower \n  })\n  return sorted\n} \n","import { extractColorsFromImageData } from \"./extractColors\"\nimport { sortFinalColors } from \"./extractColors\"\nimport cleanInputs from \"./extract/cleanInputs\"\nimport extractor from \"./extract/extractor\"\nimport { FinalColor } from \"./types/Color\"\nimport type { BrowserOptions } from \"./types/Options\"\n\n/**\n * Extract ImageData from image.\n * Reduce image to a pixel count.\n */\nconst getImageData = (_image: HTMLImageElement, _pixels: number) => {\n  const currentPixels = _image.width * _image.height\n  const width = currentPixels < _pixels ? _image.width : Math.round(_image.width * Math.sqrt(_pixels / currentPixels))\n  const height = currentPixels < _pixels ? _image.height : Math.round(_image.height * Math.sqrt(_pixels / currentPixels))\n\n  const canvas = document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n\n  const context = canvas.getContext('2d') as CanvasRenderingContext2D\n  context.drawImage(_image, 0, 0, _image.width, _image.height, 0, 0, width, height)\n\n  return context.getImageData(0, 0, width, height)\n}\n\n/**\n * Extract colors from an HTMLImageElement.\n */\nconst extractColorsFromImage = (image: HTMLImageElement, options: BrowserOptions = {}) => {\n  const [_pixels, _distance, _splitPower, _colorValidator, _hueDistance, _saturationDistance, _lightnessDistance, _crossOrigin] = cleanInputs(options)\n  image.crossOrigin = _crossOrigin\n  return new Promise((resolve: (value: FinalColor[]) => void) => {\n    const extract = (image: HTMLImageElement) => {\n      const imageData = getImageData(image, _pixels)\n      const _colors = extractor(imageData, _pixels, _distance, _splitPower, _colorValidator)\n      resolve(sortFinalColors(_colors, _pixels, _hueDistance, _saturationDistance, _lightnessDistance))\n    }\n\n    if (image.complete) {\n      extract(image)\n    } else {\n      const imageLoaded = () => {\n        image.removeEventListener('load', imageLoaded)\n        extract(image)\n      }\n      image.addEventListener('load', imageLoaded)\n    }\n  })\n}\n\n/**\n * Extract colors from a path.\n * The image will be downloaded.\n */\nconst extractColorsFromSrc = (src: string, options: BrowserOptions = {}) => {\n  const image = new Image()\n  image.src = src\n  return extractColorsFromImage(image, options)\n}\n\n/**\n * Extract colors from a picture.\n */\nconst extractColors = (picture: string | HTMLImageElement | ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number }, options?: BrowserOptions) => {\n\n  if (picture instanceof Image) {\n    return extractColorsFromImage(picture, options)\n  }\n\n  if (picture instanceof ImageData || (picture instanceof Object && picture.data)) {\n    return new Promise((resolve: (value: FinalColor[]) => void) => {\n      resolve(extractColorsFromImageData(picture, options))\n    })\n  }\n\n  if (typeof picture === \"string\") {\n    return extractColorsFromSrc(picture, options)\n  }\n\n  throw new Error(`Can not analyse picture`)\n}\n\nexport {\n  extractColorsFromImageData,\n  extractColorsFromImage,\n  extractColorsFromSrc,\n  extractColors\n}\n\nexport default extractColors\n"],"names":["addPokemonToList","createAsyncThunk","async","pokemon","_ref","getState","dispatch","app","userInfo","userPokemons","email","setToast","findIndex","userPokemon","name","types","stats","forEach","type","push","Object","keys","toString","addDoc","pokemonListRef","id","getUserPokemons","concat","err","console","log","pokemons","useAppDispatch","navigate","useNavigate","location","useLocation","_jsx","className","children","length","map","data","_jsxs","pathname","includes","FaPlus","onClick","FaTrash","removePokemonFromUserList","firebaseId","IoGitCompare","addToCompare","src","image","alt","loading","setPokemonTab","pokemonTabs","description","setCurrentPokemon","undefined","index","isLoaded","setIsLoaded","useState","pokemonData","useAppSelector","useEffect","currentPokemon","evolution","_ref2","getPokemonsData","fetchData","PokemonCardGrid","randomPokemons","Loader","encounters","encounter","pokemonAbilities","abilities","ability","moves","document","querySelectorAll","progressBar","style","width","createStatsArray","statType","statsSet","Set","pokemonTypes","stat","has","add","toUpperCase","slice","Array","from","_Fragment","join","evolutionLevel","value","max","Info","PokemonContainer","Wrapper","params","useParams","currentPokemonTab","getRecursiveEvolution","useCallback","evolutionChain","level","evolutionData","evolves_to","species","url","replace","getEvolutionData","isDataLoading","setIsDataLoading","getPokemonInfo","axios","get","pokemonRoute","dataEncounters","location_area_encounters","evolution_chain","evolutionURL","pokemonSpeciesRoute","_ref3","_ref4","move","chain","find","_ref5","location_area","split","_ref6","base_stat","_ref7","imageElemet","createElement","images","options","pixels","distance","splitPower","colorValidator","red","green","blue","arguments","saturationDistance","lightnessDistance","hueDistance","color","extractColors","documentElement","setProperty","hex","getColor","defaultImages","Description","Evolution","locations","Locations","CapableMoves","Component","s","constructor","t","i","e","h","o","u","l","this","g","M","p","m","Math","abs","v","n","min","r","C","$","_","j","D","N","O","P","a","W","G","b","reduce","round","I","L","Number","MAX_SAFE_INTEGER","isInteger","Error","MAX_VALUE","testFunction","call","c","crossOrigin","S","k","T","B","sort","F","H","R","V","q","extractor","height","floor","d","sortFinalColors","repeat","area","hue","saturation","lightness","intensity","f","Promise","sqrt","getContext","drawImage","getImageData","complete","imageLoaded","removeEventListener","addEventListener","Image","w","ImageData","default","extractColorsFromImage","extractColorsFromImageData","extractColorsFromSrc","defineProperties","A","Symbol","toStringTag"],"sourceRoot":""}