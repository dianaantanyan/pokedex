{"version":3,"file":"static/js/764.42e6dc0b.chunk.js","mappings":"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","sources":["app/reducers/addPokemonToList.ts","components/PokemonCardGrid.tsx","pages/Search.tsx","sections/Wrapper.tsx"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { addDoc } from \"firebase/firestore\";\nimport { pokemonListRef } from \"../../utils/firebaseConfig\";\nimport { getUserPokemons } from \"./getUserPokemons\";\nimport { setToast } from \"../slices/AppSlice\";\nimport {\n  pokemonStatsType,\n  pokemonTypeInterface,\n  userPokemonsType,\n} from \"../../utils/types\";\nimport { RootState } from \"../store\";\n\nexport const addPokemonToList = createAsyncThunk(\n  \"pokemon/addPkemon\",\n  async (\n    pokemon: {\n      id: number;\n      name: string;\n      types: pokemonTypeInterface[] | string[];\n      stats?: pokemonStatsType[];\n    },\n    { getState, dispatch }\n  ) => {\n    try {\n      const {\n        app: { userInfo },\n        pokemon: { userPokemons },\n      } = getState() as RootState;\n      if (!userInfo?.email) {\n        return dispatch(\n          setToast(\"Please login in order to add pokemon to your collection.\")\n        );\n      }\n      const index = userPokemons.findIndex((userPokemon: userPokemonsType) => {\n        return userPokemon.name === pokemon.name;\n      });\n      if (index === -1) {\n        let types: string[] = [];\n        if (!pokemon.stats) {\n          pokemon.types.forEach((type: any) =>\n            types.push(Object.keys(type).toString())\n          );\n        } else {\n          types = pokemon.types as string[];\n        }\n        await addDoc(pokemonListRef, {\n          pokemon: { id: pokemon.id, name: pokemon.name, types },\n          email: userInfo.email,\n        });\n        await dispatch(getUserPokemons());\n        dispatch(setToast(`${pokemon.name} added to your collection.`));\n      } else {\n        dispatch(setToast(`${pokemon.name} already part of your collection.`));\n      }\n    } catch (err) {\n      console.log({ err });\n    }\n  }\n);\n","import React from \"react\";\nimport { IoGitCompare } from \"react-icons/io5\";\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\nimport { addToCompare, setCurrentPokemon } from \"../app/slices/PokemonSlice\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport { removePokemonFromUserList } from \"../app/reducers/removePokemonFromUserList\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { setPokemonTab, setToast } from \"../app/slices/AppSlice\";\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\nimport { pokemonTabs } from \"../utils/constants\";\nimport { pokemonTypeInterface, userPokemonsType } from \"../utils/types\";\n\n\nfunction PokemonCardGrid({ pokemons }: { pokemons: userPokemonsType[] }) {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  return (\n    <div className=\"pokemon-card-grid-container\">\n      <div className=\"pokemon-card-grid\">\n        {pokemons &&\n          pokemons.length > 0 &&\n          pokemons?.map((data: userPokemonsType) => {\n            return (\n              <div key={data.id} className=\"pokemon-card\">\n                <div className=\"pokemon-card-list\">\n                  {location.pathname.includes(\"/pokemon\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : location.pathname.includes(\"/search\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : (\n                    <FaTrash\n                      className=\"trash\"\n                      onClick={async () => {\n                        await dispatch(\n                          removePokemonFromUserList({ id: data.firebaseId! })\n                        );\n                        dispatch(setToast(\"Pokemon Removed Successfully.\"));\n                      }}\n                    />\n                  )}\n                </div>\n                <div className=\"pokemon-card-compare\">\n                  <IoGitCompare\n                    onClick={() => {\n                      dispatch(addToCompare(data));\n                      dispatch(\n                        setToast(\n                          `${data.name} has been added to compare queue.`\n                        )\n                      );\n                    }}\n                  />\n                </div>\n                <h3 className=\"pokemon-card-title\">{data.name}</h3>\n                <img\n                  src={data.image}\n                  alt=\"\"\n                  className=\"pokemon-card-image\"\n                  loading=\"lazy\"\n                  onClick={() => {\n                    dispatch(setPokemonTab(pokemonTabs.description));\n                    dispatch(setCurrentPokemon(undefined));\n                    navigate(`/pokemon/${data.id}`);\n                  }}\n                />\n                <div className=\"pokemon-card-types\">\n                  {data.types.map(\n                    (type: pokemonTypeInterface, index: number) => {\n                      const keys = Object.keys(type);\n                      return (\n                        <div className=\"pokemon-card-types-type\" key={index}>\n                          <img\n                            src={type[keys[0]].image}\n                            alt=\"pokemon type\"\n                            className=\"pokemon-card-types-type-image\"\n                            loading=\"lazy\"\n                          />\n                          <h6 className=\"pokemon-card-types-type-text\">\n                            {keys[0]}\n                          </h6>\n                        </div>\n                      );\n                    }\n                  )}\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default PokemonCardGrid;\n","// @ts-nocheck\n\nimport React, { useEffect } from \"react\";\nimport Wrapper from \"../sections/Wrapper\";\nimport { debounce } from \"../utils\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport { getInitialPokemonData } from \"../app/reducers/getInitialPokemonData\";\nimport { getPokemonsData } from \"../app/reducers/getPokemonsData\";\nimport Loader from \"../components/Loader\";\nimport { setLoading } from \"../app/slices/AppSlice\";\nimport PokemonCardGrid from \"../components/PokemonCardGrid\";\n\n\nfunction Search() {\n  const handleChange = debounce((value: string) => getPokemon(value), 300);\n  const isLoading = useAppSelector(({ app: { isLoading } }) => isLoading);\n\n  const dispatch = useAppDispatch();\n  const { allPokemon, randomPokemons } = useAppSelector(\n    ({ pokemon }) => pokemon\n  );\n\n  useEffect(() => {\n    dispatch(getInitialPokemonData());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (allPokemon) {\n      const clonedPokemons = [...allPokemon];\n      const randomPokemonsId = clonedPokemons\n        .sort(() => Math.random() - Math.random())\n        .slice(0, 20);\n      dispatch(getPokemonsData(randomPokemonsId));\n    }\n  }, [allPokemon, dispatch]);\n\n  useEffect(() => {\n    if (randomPokemons) {\n      dispatch(setLoading(false));\n    }\n  }, [randomPokemons, dispatch]);\n\n  const getPokemon = async (value: string) => {\n    if (value.length) {\n      const pokemons = allPokemon.filter((pokemon) =>\n        pokemon.name.includes(value.toLowerCase())\n      );\n      dispatch(getPokemonsData(pokemons));\n    } else {\n      const clonedPokemons = [...allPokemon];\n      const randomPokemonsId = clonedPokemons\n        .sort(() => Math.random() - Math.random())\n        .slice(0, 20);\n      dispatch(getPokemonsData(randomPokemonsId));\n    }\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            onChange={(e) => handleChange(e.target.value)}\n            className=\"pokemon-searchbar\"\n            placeholder=\"Search Pokemon\"\n          />\n          <PokemonCardGrid pokemons={randomPokemons} />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Wrapper(Search);\n","import React from \"react\";\n\nconst Wrapper = (Component: React.FC) => () => {\n  return (\n    <div className=\"content\">\n      <Component />\n    </div>\n  );\n};\n\nexport default Wrapper;\n"],"names":["addPokemonToList","createAsyncThunk","async","pokemon","_ref","getState","dispatch","app","userInfo","userPokemons","email","setToast","findIndex","userPokemon","name","types","stats","forEach","type","push","Object","keys","toString","addDoc","pokemonListRef","id","getUserPokemons","concat","err","console","log","pokemons","useAppDispatch","navigate","useNavigate","location","useLocation","_jsx","className","children","length","map","data","_jsxs","pathname","includes","FaPlus","onClick","FaTrash","removePokemonFromUserList","firebaseId","IoGitCompare","addToCompare","src","image","alt","loading","setPokemonTab","pokemonTabs","description","setCurrentPokemon","undefined","index","Wrapper","handleChange","debounce","value","getPokemon","isLoading","useAppSelector","allPokemon","randomPokemons","_ref2","useEffect","getInitialPokemonData","randomPokemonsId","sort","Math","random","slice","getPokemonsData","setLoading","filter","toLowerCase","_Fragment","Loader","onChange","e","target","placeholder","PokemonCardGrid","Component"],"sourceRoot":""}